<mxfile host="Electron" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/28.1.2 Chrome/138.0.7204.243 Electron/37.4.0 Safari/537.36" version="28.1.2">
  <diagram name="Code Diagram - MS Pagos" id="1VZtE8z5gQj2MIVFYrnk">
    <mxGraphModel dx="1156" dy="880" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1654" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="jvA2GdDjLGuo9DR_L78L-1" value="CODE DIAGRAM - MICROSERVICIO DE PAGOS SERVICIUDAD" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=18;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="60" y="40" width="1520" height="60" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-2" value="CONTROLLER LAYER" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;fontSize=14;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="120" width="200" height="30" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-3" value="@RestController&#xa;@RequestMapping(&quot;/api/v1/pagos&quot;)&#xa;@Validated&#xa;public class PaymentController {&#xa;&#xa;    @Autowired&#xa;    private PaymentService paymentService;&#xa;    &#xa;    @Autowired&#xa;    private PaymentMapper paymentMapper;&#xa;    &#xa;    @PostMapping(&quot;/unificado&quot;)&#xa;    @Operation(summary = &quot;Procesar pago unificado&quot;)&#xa;    public ResponseEntity&lt;PaymentResponseDTO&gt; &#xa;        procesarPagoUnificado(&#xa;            @Valid @RequestBody PagoUnificadoRequest request) {&#xa;        &#xa;        try {&#xa;            PaymentCommand command = paymentMapper&#xa;                .toCommand(request);&#xa;            &#xa;            PaymentResult result = paymentService&#xa;                .procesarPagoUnificado(command);&#xa;            &#xa;            PaymentResponseDTO response = paymentMapper&#xa;                .toResponseDTO(result);&#xa;            &#xa;            return ResponseEntity.ok(response);&#xa;            &#xa;        } catch (PaymentValidationException e) {&#xa;            return ResponseEntity.badRequest()&#xa;                .body(PaymentResponseDTO.error(e.getMessage()));&#xa;        } catch (PaymentProcessingException e) {&#xa;            return ResponseEntity.status(500)&#xa;                .body(PaymentResponseDTO.error(&#xa;                    &quot;Error procesando pago&quot;));&#xa;        }&#xa;    }&#xa;    &#xa;    @GetMapping(&quot;/{id}&quot;)&#xa;    public ResponseEntity&lt;PaymentStatusDTO&gt; &#xa;        consultarEstadoPago(@PathVariable String id) {&#xa;        &#xa;        Payment payment = paymentService&#xa;            .consultarEstadoPago(id);&#xa;        &#xa;        PaymentStatusDTO status = paymentMapper&#xa;            .toStatusDTO(payment);&#xa;        &#xa;        return ResponseEntity.ok(status);&#xa;    }&#xa;&#xa;    @PostMapping(&quot;/{id}/cancelar&quot;)&#xa;    public ResponseEntity&lt;Void&gt; cancelarPago(&#xa;        @PathVariable String id) {&#xa;        &#xa;        paymentService.cancelarPago(id);&#xa;        return ResponseEntity.ok().build();&#xa;    }&#xa;}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;align=left;verticalAlign=top;fontFamily=Courier New;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="80" y="160" width="400" height="480" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-4" value="SERVICE LAYER" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=14;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="520" y="120" width="200" height="30" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-5" value="@Service&#xa;@Transactional&#xa;@Slf4j&#xa;public class PaymentService {&#xa;&#xa;    @Autowired&#xa;    private PaymentRepository paymentRepository;&#xa;    &#xa;    @Autowired&#xa;    private SagaOrchestrator sagaOrchestrator;&#xa;    &#xa;    @Autowired&#xa;    private PaymentValidator paymentValidator;&#xa;    &#xa;    @Autowired&#xa;    private ClienteService clienteService;&#xa;    &#xa;    @CircuitBreaker(name = &quot;payment-service&quot;)&#xa;    @Retry(name = &quot;payment-service&quot;)&#xa;    @TimeLimiter(name = &quot;payment-service&quot;)&#xa;    public PaymentResult procesarPagoUnificado(&#xa;        PaymentCommand command) {&#xa;        &#xa;        log.info(&quot;Iniciando pago unificado para cliente: {}&quot;, &#xa;            command.getClienteId());&#xa;        &#xa;        // 1. Validar request&#xa;        paymentValidator.validate(command);&#xa;        &#xa;        // 2. Validar cliente ServiCiudad&#xa;        boolean clienteValido = clienteService&#xa;            .validarClienteServiCiudad(command.getClienteId());&#xa;        &#xa;        if (!clienteValido) {&#xa;            throw new ClienteInvalidoException(&#xa;                &quot;Cliente no válido en ServiCiudad&quot;);&#xa;        }&#xa;        &#xa;        // 3. Crear entidad Payment&#xa;        Payment payment = Payment.builder()&#xa;            .clienteId(command.getClienteId())&#xa;            .servicios(command.getServicios())&#xa;            .montoTotal(command.calcularMontoTotal())&#xa;            .metodoPago(command.getMetodoPago())&#xa;            .estado(PaymentStatus.PENDING)&#xa;            .fechaCreacion(LocalDateTime.now())&#xa;            .build();&#xa;        &#xa;        // 4. Persistir payment&#xa;        payment = paymentRepository.save(payment);&#xa;        &#xa;        // 5. Iniciar Saga de pago distribuido&#xa;        SagaResult sagaResult = sagaOrchestrator&#xa;            .coordinarPagoDistribuido(payment);&#xa;        &#xa;        // 6. Actualizar estado según resultado&#xa;        if (sagaResult.isSuccess()) {&#xa;            payment.marcarComoProcesado();&#xa;            log.info(&quot;Pago completado exitosamente: {}&quot;, &#xa;                payment.getId());&#xa;        } else {&#xa;            payment.marcarComoFallido();&#xa;            log.error(&quot;Pago falló: {}, razón: {}&quot;, &#xa;                payment.getId(), sagaResult.getError());&#xa;        }&#xa;        &#xa;        paymentRepository.save(payment);&#xa;        &#xa;        return PaymentResult.from(payment, sagaResult);&#xa;    }&#xa;    &#xa;    @Cacheable(value = &quot;payments&quot;, key = &quot;#id&quot;)&#xa;    public Payment consultarEstadoPago(String id) {&#xa;        return paymentRepository.findById(id)&#xa;            .orElseThrow(() -&gt; new PaymentNotFoundException(&#xa;                &quot;Pago no encontrado: &quot; + id));&#xa;    }&#xa;    &#xa;    public void cancelarPago(String id) {&#xa;        Payment payment = consultarEstadoPago(id);&#xa;        &#xa;        if (payment.getEstado() == PaymentStatus.COMPLETED) {&#xa;            throw new PaymentStateException(&#xa;                &quot;No se puede cancelar un pago completado&quot;);&#xa;        }&#xa;        &#xa;        payment.setEstado(PaymentStatus.CANCELLED);&#xa;        paymentRepository.save(payment);&#xa;        &#xa;        // Ejecutar compensaciones si es necesario&#xa;        if (payment.getEstado() == PaymentStatus.PROCESSING) {&#xa;            sagaOrchestrator.ejecutarCompensaciones(&#xa;                payment.getId());&#xa;        }&#xa;    }&#xa;}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;align=left;verticalAlign=top;fontFamily=Courier New;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="520" y="160" width="480" height="680" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-6" value="SAGA ORCHESTRATOR" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=14;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="1040" y="120" width="200" height="30" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-7" value="@Component&#xa;@Slf4j&#xa;public class SagaOrchestrator {&#xa;&#xa;    @Autowired&#xa;    private PaymentGateway paymentGateway;&#xa;    &#xa;    @Autowired&#xa;    private LegacyEnergyAdapter energyAdapter;&#xa;    &#xa;    @Autowired&#xa;    private LegacyWaterAdapter waterAdapter;&#xa;    &#xa;    @Autowired&#xa;    private TelecomAdapter telecomAdapter;&#xa;    &#xa;    @Autowired&#xa;    private EventPublisher eventPublisher;&#xa;    &#xa;    @Autowired&#xa;    private SagaStateRepository sagaStateRepository;&#xa;    &#xa;    public SagaResult coordinarPagoDistribuido(&#xa;        Payment payment) {&#xa;        &#xa;        String sagaId = UUID.randomUUID().toString();&#xa;        &#xa;        SagaState sagaState = SagaState.builder()&#xa;            .sagaId(sagaId)&#xa;            .paymentId(payment.getId())&#xa;            .estado(SagaStatus.STARTED)&#xa;            .steps(new ArrayList&lt;&gt;())&#xa;            .build();&#xa;        &#xa;        sagaStateRepository.save(sagaState);&#xa;        &#xa;        try {&#xa;            // Paso 1: Procesar pago en PSE&#xa;            log.info(&quot;Saga {}: Procesando pago en PSE&quot;, sagaId);&#xa;            &#xa;            PaymentResult pseResult = paymentGateway&#xa;                .procesarPago(payment.toPaymentRequest());&#xa;            &#xa;            sagaState.addStep(SagaStep.completed(&#xa;                &quot;PSE_PAYMENT&quot;, pseResult));&#xa;            &#xa;            if (!pseResult.isSuccess()) {&#xa;                return SagaResult.failed(&#xa;                    &quot;Error en procesamiento PSE: &quot; + &#xa;                    pseResult.getError());&#xa;            }&#xa;            &#xa;            // Paso 2: Actualizar saldo energía&#xa;            if (payment.tieneServicio(TipoServicio.ENERGIA)) {&#xa;                log.info(&quot;Saga {}: Actualizando saldo energía&quot;, &#xa;                    sagaId);&#xa;                &#xa;                boolean energiaOk = energyAdapter&#xa;                    .actualizarSaldoEnergia(&#xa;                        payment.getServicioPorTipo(&#xa;                            TipoServicio.ENERGIA));&#xa;                &#xa;                sagaState.addStep(SagaStep.from(&#xa;                    &quot;ENERGY_UPDATE&quot;, energiaOk));&#xa;                &#xa;                if (!energiaOk) {&#xa;                    ejecutarCompensaciones(sagaState);&#xa;                    return SagaResult.failed(&#xa;                        &quot;Error actualizando saldo energía&quot;);&#xa;                }&#xa;            }&#xa;            &#xa;            // Paso 3: Actualizar saldo agua&#xa;            if (payment.tieneServicio(TipoServicio.ACUEDUCTO)) {&#xa;                log.info(&quot;Saga {}: Actualizando saldo agua&quot;, &#xa;                    sagaId);&#xa;                &#xa;                boolean aguaOk = waterAdapter&#xa;                    .actualizarSaldoAcueducto(&#xa;                        payment.getServicioPorTipo(&#xa;                            TipoServicio.ACUEDUCTO));&#xa;                &#xa;                sagaState.addStep(SagaStep.from(&#xa;                    &quot;WATER_UPDATE&quot;, aguaOk));&#xa;                &#xa;                if (!aguaOk) {&#xa;                    ejecutarCompensaciones(sagaState);&#xa;                    return SagaResult.failed(&#xa;                        &quot;Error actualizando saldo agua&quot;);&#xa;                }&#xa;            }&#xa;            &#xa;            // Paso 4: Actualizar saldo telecom&#xa;            if (payment.tieneServicio(&#xa;                TipoServicio.TELECOMUNICACIONES)) {&#xa;                &#xa;                log.info(&quot;Saga {}: Actualizando saldo telecom&quot;, &#xa;                    sagaId);&#xa;                &#xa;                boolean telecomOk = telecomAdapter&#xa;                    .actualizarSaldoTelecom(&#xa;                        payment.getServicioPorTipo(&#xa;                            TipoServicio.TELECOMUNICACIONES));&#xa;                &#xa;                sagaState.addStep(SagaStep.from(&#xa;                    &quot;TELECOM_UPDATE&quot;, telecomOk));&#xa;                &#xa;                if (!telecomOk) {&#xa;                    ejecutarCompensaciones(sagaState);&#xa;                    return SagaResult.failed(&#xa;                        &quot;Error actualizando saldo telecom&quot;);&#xa;                }&#xa;            }&#xa;            &#xa;            // Paso 5: Publicar evento de éxito&#xa;            PagoCompletadoEvent event = &#xa;                PagoCompletadoEvent.builder()&#xa;                .paymentId(payment.getId())&#xa;                .clienteId(payment.getClienteId())&#xa;                .montoTotal(payment.getMontoTotal())&#xa;                .servicios(payment.getServicios())&#xa;                .timestamp(LocalDateTime.now())&#xa;                .build();&#xa;            &#xa;            eventPublisher.publish(event);&#xa;            &#xa;            sagaState.setEstado(SagaStatus.COMPLETED);&#xa;            sagaStateRepository.save(sagaState);&#xa;            &#xa;            log.info(&quot;Saga {} completada exitosamente&quot;, sagaId);&#xa;            &#xa;            return SagaResult.success(pseResult.getTransactionId());&#xa;            &#xa;        } catch (Exception e) {&#xa;            log.error(&quot;Error en Saga {}: {}&quot;, sagaId, e.getMessage());&#xa;            &#xa;            ejecutarCompensaciones(sagaState);&#xa;            &#xa;            return SagaResult.failed(&#xa;                &quot;Error inesperado en saga: &quot; + e.getMessage());&#xa;        }&#xa;    }&#xa;    &#xa;    private void ejecutarCompensaciones(SagaState sagaState) {&#xa;        log.warn(&quot;Ejecutando compensaciones para saga: {}&quot;, &#xa;            sagaState.getSagaId());&#xa;        &#xa;        // Compensar en orden inverso&#xa;        List&lt;SagaStep&gt; steps = sagaState.getSteps();&#xa;        Collections.reverse(steps);&#xa;        &#xa;        for (SagaStep step : steps) {&#xa;            if (step.isCompleted()) {&#xa;                try {&#xa;                    switch (step.getStepName()) {&#xa;                        case &quot;PSE_PAYMENT&quot;:&#xa;                            paymentGateway.revertirTransaccion(&#xa;                                step.getTransactionId());&#xa;                            break;&#xa;                        case &quot;ENERGY_UPDATE&quot;:&#xa;                            energyAdapter.revertirActualizacion(&#xa;                                sagaState.getPaymentId());&#xa;                            break;&#xa;                        case &quot;WATER_UPDATE&quot;:&#xa;                            waterAdapter.revertirActualizacion(&#xa;                                sagaState.getPaymentId());&#xa;                            break;&#xa;                        case &quot;TELECOM_UPDATE&quot;:&#xa;                            telecomAdapter.revertirActualizacion(&#xa;                                sagaState.getPaymentId());&#xa;                            break;&#xa;                    }&#xa;                    &#xa;                    log.info(&quot;Compensación ejecutada para: {}&quot;, &#xa;                        step.getStepName());&#xa;                        &#xa;                } catch (Exception e) {&#xa;                    log.error(&quot;Error en compensación {}: {}&quot;, &#xa;                        step.getStepName(), e.getMessage());&#xa;                }&#xa;            }&#xa;        }&#xa;        &#xa;        sagaState.setEstado(SagaStatus.COMPENSATED);&#xa;        sagaStateRepository.save(sagaState);&#xa;    }&#xa;}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;align=left;verticalAlign=top;fontFamily=Courier New;fontSize=8;" vertex="1" parent="1">
          <mxGeometry x="1040" y="160" width="520" height="1000" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-8" value="DOMAIN ENTITIES" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=14;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="680" width="200" height="30" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-9" value="@Entity&#xa;@Table(name = &quot;payments&quot;)&#xa;@Builder&#xa;@Data&#xa;@NoArgsConstructor&#xa;@AllArgsConstructor&#xa;public class Payment {&#xa;&#xa;    @Id&#xa;    private String id;&#xa;    &#xa;    @Column(name = &quot;cliente_id&quot;, nullable = false)&#xa;    private String clienteId;&#xa;    &#xa;    @Column(name = &quot;monto_total&quot;, precision = 19, scale = 2)&#xa;    private BigDecimal montoTotal;&#xa;    &#xa;    @OneToMany(cascade = CascadeType.ALL, &#xa;               fetch = FetchType.LAZY, &#xa;               mappedBy = &quot;payment&quot;)&#xa;    private List&lt;ServicioPago&gt; servicios;&#xa;    &#xa;    @Enumerated(EnumType.STRING)&#xa;    @Column(name = &quot;estado&quot;)&#xa;    private PaymentStatus estado;&#xa;    &#xa;    @Column(name = &quot;fecha_creacion&quot;)&#xa;    private LocalDateTime fechaCreacion;&#xa;    &#xa;    @Column(name = &quot;fecha_procesamiento&quot;)&#xa;    private LocalDateTime fechaProcesamiento;&#xa;    &#xa;    @Column(name = &quot;transaction_id&quot;)&#xa;    private String transactionId;&#xa;    &#xa;    @Enumerated(EnumType.STRING)&#xa;    @Column(name = &quot;metodo_pago&quot;)&#xa;    private MetodoPago metodoPago;&#xa;    &#xa;    // Métodos de negocio&#xa;    public void marcarComoProcesado() {&#xa;        this.estado = PaymentStatus.COMPLETED;&#xa;        this.fechaProcesamiento = LocalDateTime.now();&#xa;    }&#xa;    &#xa;    public void marcarComoFallido() {&#xa;        this.estado = PaymentStatus.FAILED;&#xa;    }&#xa;    &#xa;    public BigDecimal calcularComision() {&#xa;        return montoTotal.multiply(&#xa;            new BigDecimal(&quot;0.01&quot;)); // 1% comisión&#xa;    }&#xa;    &#xa;    public boolean tieneServicio(TipoServicio tipo) {&#xa;        return servicios.stream()&#xa;            .anyMatch(s -&gt; s.getTipoServicio() == tipo);&#xa;    }&#xa;    &#xa;    public ServicioPago getServicioPorTipo(TipoServicio tipo) {&#xa;        return servicios.stream()&#xa;            .filter(s -&gt; s.getTipoServicio() == tipo)&#xa;            .findFirst()&#xa;            .orElseThrow(() -&gt; new IllegalArgumentException(&#xa;                &quot;Servicio no encontrado: &quot; + tipo));&#xa;    }&#xa;    &#xa;    public PaymentRequest toPaymentRequest() {&#xa;        return PaymentRequest.builder()&#xa;            .amount(montoTotal)&#xa;            .clienteId(clienteId)&#xa;            .paymentMethod(metodoPago.toString())&#xa;            .description(&quot;Pago ServiCiudad - &quot; + &#xa;                servicios.size() + &quot; servicios&quot;)&#xa;            .build();&#xa;    }&#xa;}" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;align=left;verticalAlign=top;fontFamily=Courier New;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="80" y="720" width="400" height="440" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-10" value="CONFIGURATION" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#fad7ac;strokeColor=#b46504;fontSize=14;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="520" y="880" width="200" height="30" as="geometry" />
        </mxCell>
        <mxCell id="jvA2GdDjLGuo9DR_L78L-11" value="# application.yml&#xa;resilience4j:&#xa;  circuitbreaker:&#xa;    instances:&#xa;      payment-service:&#xa;        failure-rate-threshold: 50&#xa;        wait-duration-in-open-state: 30s&#xa;        sliding-window-size: 10&#xa;        minimum-number-of-calls: 5&#xa;      legacy-energy:&#xa;        failure-rate-threshold: 60&#xa;        wait-duration-in-open-state: 60s&#xa;        slow-call-duration-threshold: 30s&#xa;      legacy-water:&#xa;        failure-rate-threshold: 60&#xa;        wait-duration-in-open-state: 60s&#xa;        slow-call-duration-threshold: 30s&#xa;  retry:&#xa;    instances:&#xa;      payment-service:&#xa;        max-attempts: 3&#xa;        wait-duration: 2s&#xa;        enable-exponential-backoff: true&#xa;  timelimiter:&#xa;    instances:&#xa;      payment-service:&#xa;        timeout-duration: 30s&#xa;&#xa;# Kafka Configuration&#xa;spring:&#xa;  kafka:&#xa;    bootstrap-servers: localhost:9092&#xa;    producer:&#xa;      key-serializer: org.apache.kafka.common.serialization.StringSerializer&#xa;      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer&#xa;    consumer:&#xa;      group-id: payment-service&#xa;      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer&#xa;      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer&#xa;&#xa;# Database Configuration&#xa;  datasource:&#xa;    url: jdbc:postgresql://localhost:5432/serviciudad_pagos&#xa;    username: ${DB_USER:serviciudad}&#xa;    password: ${DB_PASSWORD:password123}&#xa;  jpa:&#xa;    hibernate:&#xa;      ddl-auto: validate&#xa;    properties:&#xa;      hibernate:&#xa;        dialect: org.hibernate.dialect.PostgreSQLDialect&#xa;        format_sql: true&#xa;    show-sql: false&#xa;&#xa;# Cache Configuration&#xa;  cache:&#xa;    type: redis&#xa;  redis:&#xa;    host: localhost&#xa;    port: 6379&#xa;    timeout: 2000ms&#xa;    jedis:&#xa;      pool:&#xa;        max-active: 8&#xa;        max-idle: 8&#xa;        min-idle: 0&#xa;&#xa;# Management/Monitoring&#xa;management:&#xa;  endpoints:&#xa;    web:&#xa;      exposure:&#xa;        include: health,info,metrics,prometheus&#xa;  endpoint:&#xa;    health:&#xa;      show-details: always&#xa;  metrics:&#xa;    export:&#xa;      prometheus:&#xa;        enabled: true" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fad7ac;strokeColor=#b46504;align=left;verticalAlign=top;fontFamily=Courier New;fontSize=8;" vertex="1" parent="1">
          <mxGeometry x="520" y="920" width="480" height="560" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
