{
  "info": {
    "name": "ServiCiudad Cali API",
    "description": "Colecci√≥n completa de endpoints para ServiCiudad Cali - Sistema de Consulta Unificada de Servicios P√∫blicos\n\n‚úÖ ENDPOINTS PRINCIPALES FUNCIONANDO (100%)\n- Deuda Consolidada: /api/deuda/cliente/{id}\n- Facturas por Cliente: /api/facturas/cliente/{id}\n- Consumos por Cliente: /api/consumos-energia/cliente/{id}\n- Health Check: /actuator/health\n\nüîß CONFIGURACI√ìN:\n- Base URL: http://localhost:8080\n- Autenticaci√≥n: HTTP Basic (serviciudad:dev2025)\n- Cliente de prueba: 1001234567 (con datos reales)\n\nüìä ARQUITECTURA:\n- Arquitectura Hexagonal implementada\n- 5 patrones de dise√±o aplicados\n- Docker + PostgreSQL operativo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "serviciudad-cali",
    "version": "2.0.0"
  },
  "auth": {
    "type": "basic",
    "basic": [
      {
        "key": "username",
        "value": "{{username}}",
        "type": "string"
      },
      {
        "key": "password",
        "value": "{{password}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "clienteId",
      "value": "1001234567",
      "type": "string"
    },
    {
      "key": "facturaId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "periodo",
      "value": "202510",
      "type": "string"
    },
    {
      "key": "username",
      "value": "serviciudad",
      "type": "string"
    },
    {
      "key": "password",
      "value": "dev2025",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üèõÔ∏è ENDPOINTS PRINCIPALES",
      "description": "Endpoints principales del sistema ServiCiudad Cali - 100% funcionales",
      "item": [
        {
          "name": "01 - Deuda Consolidada (PRINCIPAL)",
          "description": "Endpoint principal para consultar deuda consolidada de un cliente\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: deuda total, facturas, consumos, estad√≠sticas\nüîß Autenticaci√≥n: HTTP Basic requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has totalGeneral\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.totalGeneral).to.be.a('number');",
                  "});",
                  "",
                  "pm.test(\"Response has estadisticas\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.estadisticas).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Response has facturasAcueducto\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.facturasAcueducto).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has consumosEnergia\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.consumosEnergia).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deuda/cliente/{{clienteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deuda", "cliente", "{{clienteId}}"]
            }
          },
          "response": []
        },
        {
          "name": "02 - Facturas por Cliente",
          "description": "Obtener todas las facturas de acueducto de un cliente\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: array de facturas con detalles\nüîß Autenticaci√≥n: HTTP Basic requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facturas/cliente/{{clienteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "facturas", "cliente", "{{clienteId}}"]
            }
          },
          "response": []
        },
        {
          "name": "03 - Consumos de Energ√≠a por Cliente",
          "description": "Obtener todos los consumos de energ√≠a de un cliente\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: array de consumos (puede estar vac√≠o)\nüîß Autenticaci√≥n: HTTP Basic requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/consumos-energia/cliente/{{clienteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "consumos-energia", "cliente", "{{clienteId}}"]
            }
          },
          "response": []
        },
        {
          "name": "04 - Factura por ID",
          "description": "Obtener una factura espec√≠fica por su ID\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: detalles de la factura\nüîß Autenticaci√≥n: HTTP Basic requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/facturas/{{facturaId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "facturas", "{{facturaId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üåê FRONTEND Y RECURSOS P√öBLICOS",
      "description": "Endpoints p√∫blicos del frontend y recursos est√°ticos",
      "item": [
        {
          "name": "01 - Frontend Principal",
          "description": "P√°gina principal del frontend web\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: HTML del frontend\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is HTML\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": []
        },
        {
          "name": "02 - Favicon",
          "description": "Icono del sitio web\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: SVG del favicon\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is SVG\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image/svg');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/favicon.svg",
              "host": ["{{baseUrl}}"],
              "path": ["favicon.svg"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîç MONITOREO Y HEALTH CHECKS",
      "description": "Endpoints de monitoreo y verificaci√≥n de salud del sistema",
      "item": [
        {
          "name": "01 - Health Check Principal",
          "description": "Verificaci√≥n general del estado del sistema\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: estado UP/DOWN del sistema\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Application is UP\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('UP');",
                  "});",
                  "",
                  "pm.test(\"Response has groups\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.groups).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            }
          },
          "response": []
        },
        {
          "name": "02 - Liveness Probe",
          "description": "Verificaci√≥n de que la aplicaci√≥n est√° viva\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: estado de liveness\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health/liveness",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health", "liveness"]
            }
          },
          "response": []
        },
        {
          "name": "03 - Readiness Probe",
          "description": "Verificaci√≥n de que la aplicaci√≥n est√° lista para recibir tr√°fico\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: estado de readiness\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health/readiness",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health", "readiness"]
            }
          },
          "response": []
        },
        {
          "name": "04 - Application Info",
          "description": "Informaci√≥n general de la aplicaci√≥n\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: informaci√≥n de la app\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/info",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "info"]
            }
          },
          "response": []
        },
        {
          "name": "05 - Metrics List",
          "description": "Lista de m√©tricas disponibles\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: lista de m√©tricas\nüîß Sin autenticaci√≥n requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üß™ TESTS ADICIONALES",
      "description": "Tests adicionales para validaci√≥n completa del sistema",
      "item": [
        {
          "name": "01 - Test con Cliente Sin Datos",
          "description": "Probar endpoint con cliente que no tiene datos\n\n‚úÖ FUNCIONANDO - 200 OK\nüìä Retorna: respuesta vac√≠a pero v√°lida\nüîß Autenticaci√≥n: HTTP Basic requerida",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has empty arrays\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.facturasAcueducto).to.be.an('array');",
                  "    pm.expect(jsonData.consumosEnergia).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deuda/cliente/0001234567",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deuda", "cliente", "0001234567"]
            }
          },
          "response": []
        },
        {
          "name": "02 - Test de Autenticaci√≥n (Sin Credenciales)",
          "description": "Probar endpoint sin autenticaci√≥n para verificar seguridad\n\n‚ùå ESPERADO - 401 Unauthorized\nüìä Retorna: error de autenticaci√≥n\nüîß Sin autenticaci√≥n (para probar seguridad)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deuda/cliente/{{clienteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deuda", "cliente", "{{clienteId}}"]
            },
            "auth": {
              "type": "noauth"
            }
          },
          "response": []
        }
      ]
    }
  ]
}